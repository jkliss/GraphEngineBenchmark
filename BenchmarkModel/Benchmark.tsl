struct PingMessage {
  string Message;
}

struct Load {
  long cellid1;
  long cellid2;
  float weight;
  bool single_element;
}

struct DistributedLoad {
  int serverID;
  int fromServerID;
  int num_elements;
  long[4194304] cellid1;
  long[4194304] cellid2;
  float[4194304] weight;
  bool[4194304] single_element;
  bool lastLoad;
}

protocol DistributedLoadMessage {
  Type: Syn;
  Request: DistributedLoad;
  Response: void;
}

protocol SynPing {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol SynEchoPing {
  Type: Syn;
  Request: PingMessage;
  Response: PingMessage;
}

protocol AsynPing {
  Type: Asyn;
  Request: PingMessage;
  Response: void;
}

struct ConfigurationMessage {
        String graph_name;
        String input_vertex_path;
        String input_edge_path;
        String l_output_path;
        bool directed;
        bool weighted;
        long e_job_id;
        String e_log_path;
        String algorithm;
        long source_vertex;
        long maxIteration;
        double damping_factor;
        String input_path;
        String e_output_path;
        String home_dir;
        int num_machines;
        int num_threads;
        long t_job_id;
        String t_log_path;
}

protocol Configuration {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol VerifySetup {
  Type: Syn;
  Request: PingMessage;
  Response: PingMessage;
}

protocol LoadGraph {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol Prepare {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol Setup {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol Run {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol Finalize {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol Terminate {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

protocol DeleteGraph {
  Type: Syn;
  Request: ConfigurationMessage;
  Response: void;
}

server BenchmarkServer {
  protocol SynPing;
  protocol SynEchoPing;
  protocol AsynPing;
  protocol Configuration;
  protocol VerifySetup;
  protocol LoadGraph;
  protocol Prepare;
  protocol Setup;
  protocol Run;
  protocol Finalize;
  protocol Terminate;
  protocol DeleteGraph;
  protocol DistributedLoadMessage;
  protocol StartBFS;
  protocol BFSUpdate;
}

cell struct SimpleGraphNode
{
    List<CellId> Outlinks;
    List<float> Weights;
    long ID;
    long Depth;
    long RealID;
    long parent;
}

cell struct FinishCommunicator
{
    bool Finished;
    bool LastLoad;
    bool FinishedReading;
    bool FinishedSending;
    bool FinishedConsuming;
    long startReading;
    long endReading;
}

cell struct SyncDepth
{
    List<long> Depths;
}

cell struct FinishCounter
{
    int count;
}

// Johannes Thiel BFS

struct StartBFSMessage {
  long root;
}

struct BFSUpdateMessage {
  long senderId;
  long level;
  List<long> recipients;
}

protocol StartBFS {
  type: Asyn;
  Request: StartBFSMessage;
  Response: void;
}

protocol BFSUpdate {
  Type: Asyn;
  Request: BFSUpdateMessage;
  Response: void;
}
